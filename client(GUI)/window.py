import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from screens.settings import settings, check_valid_ip_port
from screens.info import show_info
from main import start_threads, stop_threads, starts_recording, stops_recording, initilizing
import keyboard as kb
import callback_handler

import time

is_recording = False
thread_record = None
thread_send = None

def start_recording():
    global is_recording, thread_record, thread_send
    label = tk.Label(main_frame, font=("Arial", 16), bg="#2E2E2E", fg="white")
    label.place(x=65, y=40)
    if not check_valid_ip_port():
        messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "IP –∞–±–æ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π! –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å —ó—Ö —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.")
        return
    if not is_recording:
        mic_btn.config(bg="red", fg="white")
        is_recording = True
        initilizing()
        starts_recording()
        thread_record, thread_send = start_threads()
        label.config(text="–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...")
    else:
        mic_btn.config(bg="#2E2E2E", fg="#00ADEF")
        stops_recording()
        stop_threads()
        label.config(text="–ó–∞–ø–∏—Å –∑—É–ø–∏–Ω–µ–Ω–æ!")
        is_recording = False
        callback_handler.set_error_handling(False)


def start_recording_with_delay():
    if is_recording:
        start_recording()


def close_window():
    if is_recording:
        if messagebox.askokcancel("–ô–¥–µ –∑–∞–ø–∏—Å", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏?"):
            stops_recording()
            stop_threads()
            animate_close()
    else:
        animate_close()

def animate_window(): # –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –≤—ñ–∫–Ω–∞
    global y
    if y > target_y:  # –Ø–∫—â–æ –≤—ñ–∫–Ω–æ —â–µ –Ω–µ –¥–æ—Å—è–≥–ª–æ –∫—ñ–Ω—Ü–µ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
        y -= 10
        root.geometry(f"{width}x{height}+{x}+{y}")
        root.after(5, animate_window)  # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ 5 –º—Å
    else:
        root.geometry(f"{width}x{height}+{x}+{target_y}")  # –§—ñ–∫—Å—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é

def animate_close(): # –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞
    global y
    if y < screen_height:  # –Ø–∫—â–æ –≤—ñ–∫–Ω–æ —â–µ –Ω–µ –≤–∏–π—à–ª–æ –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É
        y += 10
        root.geometry(f"{width}x{height}+{x}+{y}")
        root.after(3, animate_close)  # –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ 3 –º—Å
    else:
        root.destroy()  # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—ñ–∫–Ω–æ

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
root = tk.Tk()
root.title("–ü—Ä–æ–≥—Ä–∞–º–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±—É–≤–∞–Ω–Ω—è –º–æ–≤–∏")
root.overrideredirect(True)  # –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É —Ä–∞–º–∫—É –≤—ñ–∫–Ω–∞

style = ttk.Style(root)
style.theme_use('winnative')

width, height = 300, 200
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

x = (screen_width - width) // 2  # –í—ñ–¥—Ü–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ
y = screen_height  
target_y = screen_height - height - 50


root.geometry(f"{width}x{height}+{x}+{y}")
root.attributes("-topmost", True)
root.attributes("-alpha", 0.95)  # –ü—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å –≤—ñ–∫–Ω–∞

main_frame = tk.Frame(root, bg="#2E2E2E", width=width, height=height, relief="raised", bd=0)
main_frame.place(x=0, y=0)


# –Ü–∫–æ–Ω–∫–∞ "–ó–∞–∫—Ä–∏—Ç–∏"
close_btn = tk.Button(main_frame, text="‚úñ", font=("Arial", 12), bg="#2E2E2E", fg="white", borderwidth=0, command=close_window)
close_btn.place(x=260, y=10)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
mic_frame = tk.Frame(main_frame, bg="#2E2E2E", highlightbackground="#00ADEF", highlightthickness=2, width=80, height=80)
mic_frame.place(x=125, y=100) # byv 60
mic_btn = tk.Button(mic_frame, text="üé§", font=("Arial", 20), bg="#2E2E2E", fg="#00ADEF", borderwidth=0, command=start_recording)
mic_btn.pack(expand=True, fill="both")

# –ö–Ω–æ–ø–∫–∞ "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
info_btn = tk.Button(main_frame, text="‚ùì", font=("Arial", 14), bg="#2E2E2E", fg="white", borderwidth=0, command=show_info)
info_btn.place(x=230, y=120)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
settings_btn = tk.Button(main_frame, text="‚öôÔ∏è", font=("Arial", 14), bg="#2E2E2E", fg="white", borderwidth=0, command=settings)
settings_btn.place(x=30, y=120)

# –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏ –≤—ñ–∫–Ω–∞
animate_window()

# Keyboard
kb.add_hotkey('Ctrl + /', lambda: start_recording())

# –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
callback_handler.set_error_callback(start_recording_with_delay)

root.mainloop()
